

# clear everything out of memory
rm(list=ls())  
getwd()
dir_path <-"C:/Users/elnaj/Desktop/MSBA Classes/classes-FAll 2020/IDS 564 media netwrk analysis/final project"
setwd(dir_path)
myData <- read.table('ca-GrQc.txt.gz')
str(myData)
library(igraph)
library(dplyr)

#create graph 

el <- myData
g_GRCN=graph.data.frame(el, directed = FALSE, vertices= NULL)


################################
#initial analysis
################################

# Edges result :28980
ecount(g_GRCN)
## Vertices result:5242
vcount(g_GRCN)


#Is it a simple graph? No!
## Check whether Self_loops exist, as do multiple edges
is.simple(g_GRCN)

# should we simplify it?? i think so??? it makes it so much smaller
g_GRCN_simpl<-simplify(g_GRCN, edge.attr.comb="sum")
summary(g_GRCN_simpl)

E(g_GRCN_simpl)$weight <-1     #assign 1 to the edge weights

num_weight<-E(g_GRCN_simpl)$weight 
length(num_weight)    
E(g_GRCN_simpl)$weight <-num_weight  # like this??


# check components 

is_connected(g_GRCN)
is_connected(g_GRCN, mode = "weak")
is_connected(g_GRCN, mode = "strong")
count_components(g_GRCN) #355 


# so it's undirected--
transitivity(g_GRCN)  #.6298
# Avg. path length and diameter
average.path.length(g_GRCN, directed=FALSE)  #6.0485

diameter(g_GRCN, directed = FALSE)  #17
# Summarize the graph structure
summary(g_GRCN)  #5242 x 28980 (14484 simplified)

table(sapply(maximal.cliques(g_GRCN), length))
# 1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   18   20   21   22   24   26 
# 1 1606 1394  594  182   52   28   13    9    4    1    4    2    1    1    1    2    1    1    1    1    1 
# 32   34   35   43   44 
# 1    1    1    2    1 

######## for some of these larger ones, let's look deeper and try to understand what's going on in those

largest_cliques(g_GRCN)   # these are the 42 vertices from the largest clique--plot these!!

# [1] 21012 22691 773   14807 3372  21847 2741  24955 6610  25758 11241 570   6179  45    21281 23293 15003 20635
# [19] 19423 18894 4164  7956  12365 17655 25346 1653  9785  21508 14540 12781 2212  19961 2952  6830  8879  11472
# [37] 12496 12851 15659 17692 20108 20562 22887 4513





############## triangles #########################
transitivity(g_GRCN, type="global") #ratio of triangles (direction disregarded) to connected triples.
#.62984
mean(transitivity(g_GRCN, type="local")) # what does this do-check
# triad types in this network #



# mean degree

mean(degree(g_GRCN))  #11.057

# degrees- what is most prevalent in the network?
max(degree.distribution(g_GRCN))  #.22835

dd <- degree.distribution(g_GRCN)
#filter the ones with zero
str(dd)


keep <- which(dd>0)
n<- dd[keep]

barplot(n, xlim= c(1,50), col="blue",
        xlab= "Number of connections", main="Frequency of degrees in network- removing zeroes")


constraints_SAP <- round(constraint(g_GRCN, nodes=V(g_GRCN)), digits=4)
# Degree centrality
degree_sap <- degree(g_GRCN)
# Node betweenness
betweens_SAP <- round(betweenness(g_GRCN, v=V(g_GRCN), directed = FALSE, nobigint =TRUE, normalized = FALSE))
# Edge betwenness
edgebetweens_SAP<-edge.betweenness(g_GRCN, e=E(g_GRCN), directed = FALSE)
# Local clustering coefficients
clustering_SAP <- transitivity(g_GRCN, type="local", vids=V(g_GRCN)) 

meas <- cbind(degree_sap, edgebetweens_SAP, betweens_SAP, constraints_SAP)
round(cor(meas), 4)


# below is original network
#                       degree_sap edgebetweens_SAP constraints_SAP betweens_SAP
# degree_sap           1.0000          -0.0052         -0.6336       0.5170
# edgebetweens_SAP    -0.0052           1.0000          0.0041      -0.0021
# constraints_SAP     -0.6336           0.0041          1.0000      -0.4336
# betweens_SAP         0.5170          -0.0021         -0.4336       1.0000


degree_sap <- degree(g_GRCN_simpl)
# Node betweenness
betweens_SAP <- round(betweenness(g_GRCN_simpl, v=V(g_GRCN_simpl), directed = FALSE, nobigint =TRUE, normalized = FALSE))
# Edge betwenness
edgebetweens_SAP<-edge.betweenness(g_GRCN_simpl, e=E(g_GRCN_simpl), directed = FALSE)
# Local clustering coefficients
clustering_SAP <- transitivity(g_GRCN_simpl, type="local", vids=V(g_GRCN_simpl)) 

meas <- cbind(degree_sap, edgebetweens_SAP, betweens_SAP)
round(cor(meas), 3)

#this is for simplified
#                       degree_sap edgebetweens_SAP betweens_SAP
# degree_sap            1.000            0.010        0.516
# edgebetweens_SAP      0.010            1.000        0.018
# betweens_SAP          0.516            0.018        1.000
###########################   clusters    ##############################################

is.connected(g_GRCN_simpl, mode = "strong")

clust1s <- clusters(g_GRCN_simpl, mode = "strong")
table(clust1s$csize)  
# 1    2    3    4    5    6    7    8    9   10   12   14 4158 
# 1  177   98   30   17   12    8    6    2    1    1    1    1 
table(clust1s$no)  #355 total clusters
table(clust1s$membership)

# different cluster sizes
#get the ones with 2,3, 4 and plot
# 
cs <- which(clust1s$csize == 2)
cs2 <- el[cs, ]
cs <- which(clust1s$csize == 3)
cs3 <- el[cs, ]
cs <- which(clust1s$csize == 4)
cs4 <- el[cs, ]

cs2 <- rbind(cs2, cs3, cs4)

g_GRCN2<-induced_subgraph(g_GRCN_simpl, v= clust1s$csize == 2)


g_GRCN2=graph.data.frame(cs2, directed = FALSE, vertices= NULL)

#g_GRCN2<-simplify(g_GRCN2, edge.attr.comb="sum")  do we need to simplify?

l=layout_with_mds(g_GRCN2)
plot(g_GRCN2, main = "strong with clusters =2, 3, 4", layout=l,
     vertex.size=3, vertex.label.cex=.9, vertex.label.dist=1.3) #see some bridges to look out for

vcount(g_GRCN2)
# 
# # Closeness Centrality
# get.adjacency(g_GRCN_simpl, sparse=FALSE)
# close_SAP <- closeness(g_GRCN_simpl)
# mean(close_SAP)  # not too good

# try mst knn to see connectivity potential in a smaller subgroup
g <- g_GRCN2
M<-as_adjacency_matrix(g, sparse=FALSE)
g
results <- mst.knn(M)

#igraph::V(results$network)$label.cex <- seq(0.6,0.6,length.out=2)

plot(results$network, vertex.size=8, 
     vertex.color=igraph::clusters(results$network)$membership, 
     layout=igraph::layout.fruchterman.reingold(results$network, niter=10000), vertex.label= NA,
     main=paste("MST-kNN \n Clustering solution \n Number of clusters=",results$cnumber,sep=""))    #just shows how much of the network is connected



###### top hubs
h<-hub.score(g_GRCN_simpl, scale=FALSE, weights = num_weight)$vector

hd<-head(sort(h,decreasing=TRUE), n = 15)
hd



# a decent plot of the overall network - simplified
V(g_GRCN_simpl)$size <- 3*(graph.strength(g_GRCN_simpl))^(1/3)  #optimal for viewing

num_weight<-E(g_GRCN_simpl)$weight 
E(g_GRCN_simpl)$weight <- num_weight
E(g_GRCN_simpl)$width <- (E(g_GRCN_simpl)$weight)
plot(g_GRCN_simpl, vertex.label = NA, layout=layout_with_kk(g_GRCN_simpl),
     main="Original Network-Simplified- KK")
plot(g_GRCN_simpl, vertex.label = NA, layout=layout_with_mds(g_GRCN_simpl),
     main="Original Network-Simplified- MDS")
plot(g_GRCN_simpl, vertex.label = NA, layout=layout_with_drl(g_GRCN_simpl),
     main="Original Network-Simplified- DrL")



# doing walktrap is better if it's with smaller groups
cw <- walktrap.community(g_GRCN2)
modularity(cw)
plot(g_GRCN2, vertex.label = NA, layout=layout_with_fr(g_GRCN2), mark.groups= cw, vertex.size=.7,
     main="Nodes in Clusters of Size 2, 3, or 4")



#consider a subset on cliques instead of clusters?
v<- count_max_cliques(g_GRCN_simpl)
v  #they are part of  the largest clique-3906

# subgraph with only the largest clique
# just looking at the largest clique
s1<-induced_subgraph(g_GRCN_simpl, v= largest.cliques(g_GRCN_simpl)[[1]])
s1
l=layout_with_gem(s1)

V(s1)$size <- 3*(graph.strength(s1))^(1/3)  #optimal for viewing
V(s1)$color <- "lightblue"

num_weight<-E(s1)$weight 
E(s1)$weight <- num_weight
E(s1)$width <- (E(s1)$weight)
plot(s1, vertex.label = NA, layout=l,
     main="Largest Clique In Network-GEM layout")


############ how big should we make our top hub subset? ###############
# we want to compare it the BEST possible subgroup of the original
#random number 1-5242. get 22 of them

#plot the graph density value as the sample size increases
set.seed(134)
j<- seq(1, 14, by = 1) #settle on <100 since after that it does not get any better
val = rep(0, length(j))

for (i in 1:length(j)) {
        xn<- sample(1:5242,j[i],replace=FALSE)
        rand<-induced_subgraph(g_GRCN_simpl, v= xn)
        val[i]<-graph.density(rand)
        
}
plot(j, val, main="graph density of random subset by vertex number",
     xlab="vertices in subgroup", ylab="graph density", col="blue")
# table(j,val)
#the best graph density is around .015 achieved around 14-15 vertices
set.seed(121)
xn<- sample(1:5242,14,replace=FALSE)
rand<-induced_subgraph(g_GRCN_simpl, v= xn)

plot(rand, vertex.label.dist=1)  #

############################ hub and authority scores ######################
g <- g_GRCN_simpl
M<-as_adjacency_matrix(g, sparse=FALSE)

dim(M)  #height of the matrix
h<-c(rep(1, dim(M)[1]))
h
# need T(M) so make it into a matrix

TotalIterations<-10
for (i in 1:TotalIterations) {
        
        ### Update authority score- matrix multiplication a= m^T h )
        #transpose- flip rows --> columns
        a<-t(M)%*%h     
        
        ### Update hub score
        h <- M%*%a     
        
        ## normalizing 
        ### sum of square of h
        norm_h<- (t(h)  %*% h)[1]
        h<- h/ sqrt(norm_h)
        
        ### sum of square of a
        norm_a<- (t(a)  %*% a)[1]
        a<- a/ sqrt(norm_a)
        
}

max(h)
h
roww <- which(h==max(h))
roww
h[roww, ] #--- 21012 is the max


# get the top 15 hub scores
hd<-head(sort(h,decreasing=TRUE), n = 15)
hd

dfnew <- which(h>.147)  #.147 gives 15  and .1381 gives 44
dfnew  # these rows we want

newGHUB <- induced_subgraph(g_GRCN_simpl, v= dfnew)
plot(newGHUB, layout_with_kk(newGHUB), vertex.size=2, vertex.label.cex=.9, 
     vertex.label.dist=1.3, main="Top 15 Hubs") #it is fully connected with just the top ones

graph.density(newGHUB)

###### now get the top 44 to see how it compares to the clique we found earlier!
dfnew <- which(h>0.1381)
newGHUB <- induced_subgraph(g_GRCN_simpl, v= dfnew)

plot(newGHUB, layout_with_mds(newGHUB), vertex.size=8,
     main="Top 44 hubs", vertex.label=NA) #it is fully connected with just the top ones

#just for insight do top 60 hubs
dfnew <- which(h>0.02)
newGHUB60 <- induced_subgraph(g_GRCN_simpl, v= dfnew)

plot(newGHUB60, layout_with_mds(newGHUB60), vertex.size=8,
     main="Top 60 hubs", vertex.label=NA) 

table(sapply(maximal.cliques(newGHUB), length)) 
# 43 2 
table(sapply(maximal.cliques(newGHUB60), length)) 
#
table(sapply(maximal.cliques(g_GRCN_simpl), length))

######3 neighbors of the top hubs- how does it trend?
neighbors(g_GRCN_simpl, v=c('21012'), mode = "all") 
neighbors(g_GRCN_simpl, v=c('2741'), mode = "all") 
neighbors(g_GRCN_simpl, v=c('12365'), mode = "all") 
neighbors(g_GRCN_simpl, v=c('21508'), mode = "all") 
neighbors(g_GRCN_simpl, v=c('9785'), mode = "all") 
neighbors(g_GRCN_simpl, v=c('15003'), mode = "all") 



graph.density(g_GRCN_simpl)
graph.density(newGHUB)   #.9989 with 44......still super high
graph.density(g_GRCN2)
graph.density(newGHUB60) #.65254 still very high compared to the original


cw <- walktrap.community(g_GRCN_simpl)
modularity(cw) #0.7823644
cw <- walktrap.community(newGHUB)
modularity(cw) #0.8469388
cw <- walktrap.community(rand)
modularity(cw) #0
cw <- walktrap.community(newGHUB60)
modularity(cw) #0.04468397

cw <- fastgreedy.community(g_GRCN_simpl)
modularity(cw) # 0.8197796
cw <- fastgreedy.community(newGHUB)
modularity(cw) #0.8469388
cw <- fastgreedy.community(rand)
modularity(cw) #0
cw <- fastgreedy.community(newGHUB60)
modularity(cw)  #.08272858



#extra
g <- newGHUB60
M<-as_adjacency_matrix(g, sparse=FALSE)
g
results <- mst.knn(M)

#igraph::V(results$network)$label.cex <- seq(0.6,0.6,length.out=2)

plot(results$network, vertex.size=8, 
     vertex.color=igraph::clusters(results$network)$membership, 
     layout=igraph::layout.fruchterman.reingold(results$network, niter=10000), vertex.label= NA,
     main=paste("MST-kNN \n Top 60 Hubs Clustering solution \n Number of clusters=",results$cnumber,sep=""))    #just shows how much of the network is connected


